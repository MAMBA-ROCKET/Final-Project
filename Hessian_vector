import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import time
import matplotlib.pyplot as plt


def tanh_prime(x):
    return 1/torch.cosh(x)**2

def tanh_prime_2(x):
    return -2 * 1/torch.cosh(x)**2 * torch.tanh(x)


def hessian_vector_product_2(model,v,x,y):
    """
    Compute the Hessian-vector product using autograd.

    model: The neural network model.
    v: The vector to multiply with the Hessian.
    X: The input data.
    y: The target data.

    """

    delta = y - model(x)
    W1 = model.fc1.weight
    W2 = model.fc2.weight
    a = model.fc1(x)

    z = model.tanh(a)

    y = model.fc2(z)


    R_a = v[0:len(W1)] * x
    R_z = tanh_prime(a) * R_a
    R_y = np.dot(R_z, model.fc2.weight.T) + np.dot(v[0:len(W1)], z)

    R_delta = R_y
    R_delta_j = tanh_prime_2(a) * R_a * (W2 * delta) + tanh_prime(a) * v[0:len(W1)] * delta + tanh_prime(a) * W2 *  R_delta

    # for i in range(len(model.fc1.weight)):
    #     R_delta_j[i] = np.dot(W1[i], R_delta_j) + np.dot(v, delta) + np.dot(W1[i], R_delta)

    result = torch.zeros_like(v)
    for j in range(len(W1)):
        result[j] = x * R_delta_j[j]

    for j in range(len(W2)):
        result[j+len(W1)] = R_delta * z[j] + delta * R_z[j]

    return result






